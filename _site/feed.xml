<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-02T22:13:09+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">jkim00844.log</title><author><name>Jiyeong Kim</name></author><entry><title type="html">인프콘 2023</title><link href="http://localhost:4000/seminar/infcon2023-spring/" rel="alternate" type="text/html" title="인프콘 2023" /><published>2023-12-02T00:00:00+09:00</published><updated>2023-12-02T00:00:00+09:00</updated><id>http://localhost:4000/seminar/infcon2023-spring</id><content type="html" xml:base="http://localhost:4000/seminar/infcon2023-spring/"><![CDATA[<h2 id="스프링과-함께-더-나은-개발자-되기---이일민토비">스프링과 함께 더 나은 개발자 되기 - 이일민(토비)</h2>

<h3 id="과연-이-기술을-실전에서-사용할-수-있을까">과연 이 기술을 실전에서 사용할 수 있을까?</h3>

<ul>
  <li>기술의 등장 배경 확인</li>
  <li>신뢰할 수 있는 개발자의 추천</li>
  <li>도전하고 싶은 마음을 만들기</li>
</ul>

<p><strong>사용한 기술과 작성한 코드에 대한 끊임 없는 질문</strong></p>

<ul>
  <li>내가 사용하는 기술은 왜 이렇게 만들어졌는가?</li>
  <li>나는 왜 이렇게 설계하고 코드를 작성하는 가?</li>
  <li>장단점은 무엇인가?</li>
  <li>다른 대안은 없을 까?</li>
  <li>다음에 개선할 부분이 있을까?</li>
</ul>

<p><strong>답을 찾기 위해</strong><br />
공식문서, 코드 API 문서, 튜토리얼 문서, 오픈소스 프로젝트 게시판/포럼, <br />
블로그, 컨퍼런스, 서적, 채팅/수다</p>

<h3 id="그래서-스프링의-목표가-무엇인가">그래서 스프링의 목표가 무엇인가?</h3>
<p>스프링의 철학이라는 컨퍼런스에서 힌트를 얻음</p>

<p><strong>스프링의 목표</strong><br />
POJO를 이용한 애플리케이션 개발<br />
엔터프라이즈 서비스를 선언적(declarative), 비침략적(non-invasive)인 방법으로 POJO에 적용</p>

<p><strong>스프링의 목표를 이루는 도구</strong><br />
DI: 오브젝트 간의 의존관계를 외부에서 주입<br />
IoC: 오브젝트 내부에서 외부로 의존관계 제어 역할 전환</p>

<p>스프링의 모든 핵심 기술은 IoC와 DI로 만들어짐<br />
IoC/DI란 결국 객체지향의 설계 원리에 충실하려고 나온게 아닐까?</p>

<p>GoF의 Design Patterns<br />
전략패턴 - Context와 Strategy 구현의 합성
<img src="/assets/images/img.png" alt="img.png" />
Context와 Strategy 오브젝트 합성은 사용할 오브젝트를 전달/주입해야 한다.</p>

<p>이를 스프링에서 보면<br />
구현 클래스와 구성 정보를 분리하고 런타임 시점에 이를 조합해서 애플리케이션 실행<br />
즉, 
서버의 서비스 오브젝트 생성과 생명주기를 관리하는 컨테이너<br />
여기에 오브젝트 합성을 대신하도록 제어의 책임을 역전 IoC<br />
동적인 오브젝트 합성을 IoC로 수행하는 것이 DI <br />
그래서 스프링은 IoC/DI 컨테이너</p>

<p>오브젝트 합성을 이용하는 패턴은 대부분 DI로 사용 가능</p>

<p><strong>DI 적용 가능한 객체지향 디자인 패턴</strong><br />
전략 패턴, 어댑터 패턴, 데코레이터 패턴, 프록시 패턴, 컴포지트 패턴, 퍼사드 패턴, <br />
옵저버 패턴, 싱글톤 패턴..</p>

<p><strong>스프링은 어떻게 객체지향 설계를 적용하고 있나?</strong></p>
<ul>
  <li>
    <p>템플릿/콜백 - 전략패턴<br />
단일 메소드 인터페이스 전략패턴의 특별한 케이스<br />
단일 메소드(SAM) 인터페이스 → 람다식<br />
JdbcTemplate, HibernateTemplate, TransactionTemplate
, JmsTemplate, JndiTemplate, RestTemplate</p>
  </li>
  <li>
    <p>웹MVC - 전략패턴<br />
WebMVC의 DispatcherServlet의 기본 전략
기본 전략 구성<br />
HandlerMapping, HandlerAdapter, ViewResolver,
ExceptionHandler, ThemeResolver, LocaleResolver
전략의 변경으로 기능 확장과 기술의 발전</p>
  </li>
  <li>
    <p>AOP - 데코레이터/프록시 패턴<br />
다이나믹 프록시를 이용한 AOP는 데코레이터 패턴 활용<br />
서비스 추상화와 결합해서 사용<br />
트랜잭션, 시큐리티</p>
  </li>
  <li>
    <p>웹 MVC/SimpleFormController - 템플릿 메소드 패턴<br />
웹 요청을 처리하는 플로우의 뼈대를 제공하고 각 단계를 변경, 확장<br />
템플릿 메소드와 전략 패턴을 함께 활용</p>
  </li>
</ul>

<p><strong>변화를 위한 설계</strong><br />
변화에 흔들리지 않는 견고한 객체지향 설계<br />
스프링이 지지하는 객체지향 설계가 스프링 자신에 뛰어나게 반영<br />
핵심 인터페이스와 구조의 변화 없이 스프링의 기능을 끊임 없이 확장<br />
스프링의 목표와 철학, 원리 이해</p>

<p>스프링의 기술에 적용된 설계방식, 디자인 패턴과 활용 방법을 파악<br />
(이후 스프링의 새로운 기능들이 더 잘 쉽고 정확하게 이해할 수 있었음)</p>

<p>내가 작성하는 애플리케이션 코드에로 동일한 원리와 설계 적용!!</p>

<h3 id="훈련과-개선">훈련과 개선</h3>

<p>회사 업무와 기술 공부 튜토리얼 따라한 것 말고 코딩을 하는가?</p>

<p><strong>코딩연습</strong></p>
<ul>
  <li>스프링을 통해서 배운 것을 응용해보는 코딩을 꾸준히</li>
  <li>튜토리얼 예제를 반복해서 작성</li>
  <li>새로운 기능을 추가하고 설계 구조를 변경해보는 시도</li>
  <li>실무에서 사용하지 못했던 기술 도입</li>
  <li>연습용 애플리케이션을 구상하고 설계</li>
  <li>초기 개발 생산성, 변경 용이성 등을 관찰</li>
</ul>

<p><strong>테스트와 리팩토링를 사용하는 코딩 연습</strong></p>
<ul>
  <li>리팩토링 - 마틴파울러(켄트벡)</li>
  <li>테스트 주도 개발 - 켄트벡</li>
</ul>

<p><strong>코딩 훈련은 꾸준히 필요하다</strong></p>
<ul>
  <li>실전 개발도 연습과 훈련이 되긴하지만</li>
  <li>스스로 목표와 의도를 가지고 개발해보는 시간 필요</li>
  <li>기술의 선택, 설계, 코드 작성의 효과를 살펴보고 개선</li>
  <li>모든 선택에는 고민이 필요하고 나의 결정과 작업한 결과에 대해서 설명할 수 있어야 함</li>
  <li>테스트는 반드시 작성</li>
</ul>

<p><strong>공유와 논쟁</strong></p>
<ul>
  <li>개인위키, 문서 도구 활용</li>
  <li>작성이 쉽고, 이후에 빠르게 검색이 가능한 도구 활용</li>
  <li>공부해야 할 문서나 자료를 모아두는 공간</li>
  <li>고민과 경험을 정리하는 기회가 꾸준히 필요함</li>
  <li>시간 제한이 있는 발표는 충분한 준비와 연습이 중요</li>
</ul>

<p><strong>나만의 정의와 설명을 만들어가기</strong></p>
<ul>
  <li>한 문장으로 정리</li>
  <li>한 문단으로 정리</li>
  <li>5분간 핵심 설명</li>
  <li>한 시간 동안 예제를 만들면서 설명</li>
  <li>하루 동안 진행되는 교육</li>
</ul>

<blockquote>
  <p>스프링은 구현 클래스와 구성 정보를 분리하고
런타임 시점에 이를 조합해서 애플리케이션 실행한다.<br />
(동적인 오브젝트 합성을 IoC로 수행하는 것이 DI)<br />
전략 패턴의 개념이 그대로 적용된다.<br />
스프링도 결국 객체 지향 설계를 기반으로 만들어졌다.</p>

  <p>디자인 패턴 한번 정리가 필요한듯,,</p>
</blockquote>]]></content><author><name>Jiyeong Kim</name></author><category term="seminar" /><category term="infcon" /><category term="spring" /><summary type="html"><![CDATA[스프링과 함께 더 나은 개발자 되기 - 이일민(토비)]]></summary></entry></feed>